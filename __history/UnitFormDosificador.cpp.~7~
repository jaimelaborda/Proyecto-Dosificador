//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "UnitFormDosificador.h"
#include "UnitFormFormulas.h"
#include "UnitFormSimulacion.h"
#include "UnitFormConfigDepositos.h"
#include "UnitDatos.h"
#include "UnitTareas.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "TDeposito"
#pragma resource "*.dfm"
TFormDosificador *FormDosificador;
//---------------------------------------------------------------------------
__fastcall TFormDosificador::TFormDosificador(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TFormDosificador::Button_SimulacionClick(TObject *Sender)
{
	FormSimulacion->Show();
}
//---------------------------------------------------------------------------

void __fastcall TFormDosificador::Timer1Timer(TObject *Sender)
{
	ActualizarGUI();
}
//---------------------------------------------------------------------------


void __fastcall TFormDosificador::ButtonFormulasClick(TObject *Sender)
{
	FormFormulas->Show();
}
//---------------------------------------------------------------------------

void __fastcall TFormDosificador::Simulacin1Click(TObject *Sender)
{
 	FormSimulacion->Show();
}
//---------------------------------------------------------------------------

void __fastcall TFormDosificador::Formulas1Click(TObject *Sender)
{
	FormFormulas->Show();
}
//---------------------------------------------------------------------------






void __fastcall TFormDosificador::ButtonConfigurarDepositosClick(TObject *Sender)

{
	FormConfigDepositos->ShowModal();
}
//---------------------------------------------------------------------------

void __fastcall TFormDosificador::Button1Click(TObject *Sender)
{
	Deposito1->Color = clRed;
	Deposito1->Paint();
}
//---------------------------------------------------------------------------



void __fastcall TFormDosificador::FormPaint(TObject *Sender)
{
	PaintBoxDep1->Canvas->MoveTo(0, 0);
	PaintBoxDep1->Canvas->LineTo(PaintBoxDep1->Width*0.5, PaintBoxDep1->Height);
	PaintBoxDep1->Canvas->LineTo(PaintBoxDep1->Width, 0);
	PaintBoxDep1->Canvas->LineTo(0, 0);
	PaintBoxDep1->Canvas->Brush->Color = clRed;
	PaintBoxDep1->Canvas->FloodFill(50,50,clRed,fsBorder);

	PaintBoxDep2->Canvas->MoveTo(0, 0);
	PaintBoxDep2->Canvas->LineTo(PaintBoxDep2->Width*0.5, PaintBoxDep2->Height);
	PaintBoxDep2->Canvas->LineTo(PaintBoxDep2->Width, 0);
	PaintBoxDep2->Canvas->LineTo(0, 0);

	PaintBoxDep3->Canvas->MoveTo(0, 0);
	PaintBoxDep3->Canvas->LineTo(PaintBoxDep3->Width*0.5, PaintBoxDep3->Height);
	PaintBoxDep3->Canvas->LineTo(PaintBoxDep3->Width, 0);
	PaintBoxDep3->Canvas->LineTo(0, 0);

	PaintBoxDep4->Canvas->MoveTo(0, 0);
	PaintBoxDep4->Canvas->LineTo(PaintBoxDep4->Width*0.5, PaintBoxDep4->Height);
	PaintBoxDep4->Canvas->LineTo(PaintBoxDep4->Width, 0);
	PaintBoxDep4->Canvas->LineTo(0, 0);

	PaintBoxDep5->Canvas->MoveTo(0, 0);
	PaintBoxDep5->Canvas->LineTo(PaintBoxDep5->Width*0.5, PaintBoxDep5->Height);
	PaintBoxDep5->Canvas->LineTo(PaintBoxDep5->Width, 0);
	PaintBoxDep5->Canvas->LineTo(0, 0);

	PaintBoxBasc->Canvas->MoveTo(0, 0);
	PaintBoxBasc->Canvas->LineTo(PaintBoxBasc->Width*0.5, PaintBoxBasc->Height);
	PaintBoxBasc->Canvas->LineTo(PaintBoxBasc->Width, 0);
	PaintBoxBasc->Canvas->LineTo(0, 0);
}
//---------------------------------------------------------------------------

